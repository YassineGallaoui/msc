@use "./variables";
@use "./_spacing";


.flex {
  display: flex !important;
}

// Generate responsive display classes
@each $breakpoint, $bp in variables.$breakpoints {
  @media (min-width: #{$bp}) {
    .#{$breakpoint}-flex {
      display: flex !important;
    }
  }
}

// ==========================================================================
// FLEXBOX PROPERTY MAPS
// ==========================================================================

$flex-directions: (
  "row": row,
  "row-reverse": row-reverse,
  "column": column,
  "column-reverse": column-reverse,
);

$flex-wraps: (
  "wrap": wrap,
  "wrap-reverse": wrap-reverse,
  "nowrap": nowrap,
);

$justify-content: (
  "start": flex-start,
  "center": center,
  "end": flex-end,
  "between": space-between,
  "around": space-around,
  "evenly": space-evenly,
);

$align-items: (
  "start": flex-start,
  "center": center,
  "end": flex-end,
  "stretch": stretch,
  "baseline": baseline,
);

$align-content: (
  "start": flex-start,
  "center": center,
  "end": flex-end,
  "stretch": stretch,
  "between": space-between,
  "around": space-around,
);

// ==========================================================================
// FLEXBOX UTILITIES (Non-Responsive)
// ==========================================================================

.flex {
  display: flex;
}

@each $key, $value in $flex-directions {
  .#{$key} {
    flex-direction: $value;
  }
}

@each $key, $value in $flex-wraps {
  .#{$key} {
    flex-wrap: $value;
  }
}

@each $key, $value in $justify-content {
  .jc-#{$key} {
    justify-content: $value;
  }
}

@each $key, $value in $align-items {
  .ai-#{$key} {
    align-items: $value;
  }
}

@each $key, $value in $align-content {
  .ac-#{$key} {
    align-content: $value;
  }
}

// ==========================================================================
// FLEXBOX UTILITIES (Responsive)
// ==========================================================================

@each $breakpoint, $bp-value in variables.$breakpoints {
  @media (min-width: $bp-value) {
    @each $key, $value in $flex-directions {
      .#{$breakpoint}-#{$key} {
        flex-direction: $value;
      }
    }

    @each $key, $value in $flex-wraps {
      .#{$breakpoint}-#{$key} {
        flex-wrap: $value;
      }
    }

    @each $key, $value in $justify-content {
      .#{$breakpoint}-jc-#{$key} {
        justify-content: $value;
      }
    }

    @each $key, $value in $align-items {
      .#{$breakpoint}-ai-#{$key} {
        align-items: $value;
      }
    }

    @each $key, $value in $align-content {
      .#{$breakpoint}-ac-#{$key} {
        align-content: $value;
      }
    }
  }
}

// ==========================================================================
// GAP UTILITIES
// ==========================================================================

// Non-responsive gap utilities
@each $key, $value in spacing.$spacing-scale {
  .gap-#{$key} {
    gap: $value;
  }
  
  .gap-x-#{$key} {
    column-gap: $value;
  }
  
  .gap-y-#{$key} {
    row-gap: $value;
  }
}

// Responsive gap utilities
@each $breakpoint, $bp-value in variables.$breakpoints {
  @media (min-width: $bp-value) {
    @each $key, $value in spacing.$spacing-scale {
      .#{$breakpoint}-gap-#{$key} {
        gap: $value;
      }
      
      .#{$breakpoint}-gap-x-#{$key} {
        column-gap: $value;
      }
      
      .#{$breakpoint}-gap-y-#{$key} {
        row-gap: $value;
      }
    }
  }
}
